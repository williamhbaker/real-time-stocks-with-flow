collections:
  examples/quotes:
    schema: quote.schema.yaml
    key:
      - /Symbol
      - /Timestamp
    projections:
      trade_timestamp: /Timestamp

  examples/trades:
    schema: trade.schema.yaml
    key:
      - /ID
    projections:
      trade_size: /Size
      trade_timestamp: /Timestamp
      total_volume: /Size

  examples/allTimeMinMaxPrice:
    schema:
      $ref: trade.schema.yaml
      reduce: { strategy: merge }
      properties:
        maxPrice:
          type: number
          reduce: { strategy: maximize }
        minPrice:
          type: number
          reduce: { strategy: minimize }
    key: [/Symbol]
    derivation:
      transform:
        minMax:
          source: { name: examples/trades }
          publish: { lambda: typescript }
      typescript:
        module: minMax.flow.ts

  examples/meanReversion:
    schema:
      reduce: { strategy: lastWriteWins }
      type: object
      properties:
        symbol: { type: string }
        price: { type: number }
        trailingAverage: { type: number }
        signal: { type: string }
      required: [symbol, price, trailingAverage, signal]
    key: [/symbol]
    derivation:
      register:
        schema:
          reduce: { strategy: merge }
          type: object
          properties:
            total:
              type: number
              reduce: { strategy: sum }
            count:
              type: number
              reduce: { strategy: sum }
          required: [total, count]
        initial: { total: 0, count: 0 }
      transform:
        meanReversion:
          source: { name: examples/trades }
          shuffle: { key: [/Symbol] }
          update: { lambda: typescript }
          publish: { lambda: typescript }
      typescript:
        module: meanReversion.flow.ts

  examples/meanReversionTrailing:
    schema:
      reduce: { strategy: lastWriteWins }
      type: object
      properties:
        symbol: { type: string }
        price: { type: number }
        trailingAverage: { type: number }
        signal: { type: string }
      required: [symbol, price, trailingAverage, signal]
    key: [/symbol]
    derivation:
      register:
        schema:
          reduce: { strategy: merge }
          type: object
          patternProperties:
            '^[0-9]+$':
              type: object
              properties:
                price: { type: number }
                timestamp: { type: string }
              reduce: { strategy: lastWriteWins }
        initial: {}
      transform:
        meanReversionTrailing:
          source: { name: examples/trades }
          shuffle: { key: [/Symbol] }
          update: { lambda: typescript }
          publish: { lambda: typescript }
      typescript:
        module: meanReversionTrailing.flow.ts

# TODO: Tests for examples/meanReversionTrailing.

tests:
  examples/test/meanReversion:
    - ingest:
        collection: examples/trades
        documents:
          - ID: 1
            Symbol: 'AAPL'
            Size: 1
            Price: 60
            Timestamp: '2022-08-22T13:00:49.520752411Z'
          - ID: 2
            Symbol: 'AAPL'
            Size: 2
            Price: 10
            Timestamp: '2022-08-22T13:10:49.520752411Z'
          - ID: 3
            Symbol: 'AAPL'
            Size: 1
            Price: 40
            Timestamp: '2022-08-22T12:13:49.520752411Z'
    - verify:
        collection: examples/meanReversion
        documents:
          - symbol: 'AAPL'
            price: 40
            signal: 'sell'
            trailingAverage: 30
